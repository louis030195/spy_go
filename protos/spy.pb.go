// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spy.proto

package pong

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StepUpdate struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StepUpdate) Reset()         { *m = StepUpdate{} }
func (m *StepUpdate) String() string { return proto.CompactTextString(m) }
func (*StepUpdate) ProtoMessage()    {}
func (*StepUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c358c3c86a4308c, []int{0}
}

func (m *StepUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StepUpdate.Unmarshal(m, b)
}
func (m *StepUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StepUpdate.Marshal(b, m, deterministic)
}
func (m *StepUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StepUpdate.Merge(m, src)
}
func (m *StepUpdate) XXX_Size() int {
	return xxx_messageInfo_StepUpdate.Size(m)
}
func (m *StepUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_StepUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_StepUpdate proto.InternalMessageInfo

func (m *StepUpdate) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type AccelerometerUpdate struct {
	X                    float64  `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float64  `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z                    float64  `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccelerometerUpdate) Reset()         { *m = AccelerometerUpdate{} }
func (m *AccelerometerUpdate) String() string { return proto.CompactTextString(m) }
func (*AccelerometerUpdate) ProtoMessage()    {}
func (*AccelerometerUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c358c3c86a4308c, []int{1}
}

func (m *AccelerometerUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccelerometerUpdate.Unmarshal(m, b)
}
func (m *AccelerometerUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccelerometerUpdate.Marshal(b, m, deterministic)
}
func (m *AccelerometerUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccelerometerUpdate.Merge(m, src)
}
func (m *AccelerometerUpdate) XXX_Size() int {
	return xxx_messageInfo_AccelerometerUpdate.Size(m)
}
func (m *AccelerometerUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_AccelerometerUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_AccelerometerUpdate proto.InternalMessageInfo

func (m *AccelerometerUpdate) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *AccelerometerUpdate) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *AccelerometerUpdate) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

type UserAccelerometerUpdate struct {
	X                    float64  `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float64  `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z                    float64  `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserAccelerometerUpdate) Reset()         { *m = UserAccelerometerUpdate{} }
func (m *UserAccelerometerUpdate) String() string { return proto.CompactTextString(m) }
func (*UserAccelerometerUpdate) ProtoMessage()    {}
func (*UserAccelerometerUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c358c3c86a4308c, []int{2}
}

func (m *UserAccelerometerUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAccelerometerUpdate.Unmarshal(m, b)
}
func (m *UserAccelerometerUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAccelerometerUpdate.Marshal(b, m, deterministic)
}
func (m *UserAccelerometerUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAccelerometerUpdate.Merge(m, src)
}
func (m *UserAccelerometerUpdate) XXX_Size() int {
	return xxx_messageInfo_UserAccelerometerUpdate.Size(m)
}
func (m *UserAccelerometerUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAccelerometerUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_UserAccelerometerUpdate proto.InternalMessageInfo

func (m *UserAccelerometerUpdate) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *UserAccelerometerUpdate) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *UserAccelerometerUpdate) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

type GyroscopeUpdate struct {
	X                    float64  `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float64  `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z                    float64  `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GyroscopeUpdate) Reset()         { *m = GyroscopeUpdate{} }
func (m *GyroscopeUpdate) String() string { return proto.CompactTextString(m) }
func (*GyroscopeUpdate) ProtoMessage()    {}
func (*GyroscopeUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c358c3c86a4308c, []int{3}
}

func (m *GyroscopeUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GyroscopeUpdate.Unmarshal(m, b)
}
func (m *GyroscopeUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GyroscopeUpdate.Marshal(b, m, deterministic)
}
func (m *GyroscopeUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GyroscopeUpdate.Merge(m, src)
}
func (m *GyroscopeUpdate) XXX_Size() int {
	return xxx_messageInfo_GyroscopeUpdate.Size(m)
}
func (m *GyroscopeUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_GyroscopeUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_GyroscopeUpdate proto.InternalMessageInfo

func (m *GyroscopeUpdate) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *GyroscopeUpdate) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *GyroscopeUpdate) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

type DeviceInfo struct {
	Model                string   `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceInfo) Reset()         { *m = DeviceInfo{} }
func (m *DeviceInfo) String() string { return proto.CompactTextString(m) }
func (*DeviceInfo) ProtoMessage()    {}
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c358c3c86a4308c, []int{4}
}

func (m *DeviceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceInfo.Unmarshal(m, b)
}
func (m *DeviceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceInfo.Marshal(b, m, deterministic)
}
func (m *DeviceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceInfo.Merge(m, src)
}
func (m *DeviceInfo) XXX_Size() int {
	return xxx_messageInfo_DeviceInfo.Size(m)
}
func (m *DeviceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceInfo proto.InternalMessageInfo

func (m *DeviceInfo) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

type BatteryLevel struct {
	Value                int32    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatteryLevel) Reset()         { *m = BatteryLevel{} }
func (m *BatteryLevel) String() string { return proto.CompactTextString(m) }
func (*BatteryLevel) ProtoMessage()    {}
func (*BatteryLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c358c3c86a4308c, []int{5}
}

func (m *BatteryLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatteryLevel.Unmarshal(m, b)
}
func (m *BatteryLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatteryLevel.Marshal(b, m, deterministic)
}
func (m *BatteryLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatteryLevel.Merge(m, src)
}
func (m *BatteryLevel) XXX_Size() int {
	return xxx_messageInfo_BatteryLevel.Size(m)
}
func (m *BatteryLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_BatteryLevel.DiscardUnknown(m)
}

var xxx_messageInfo_BatteryLevel proto.InternalMessageInfo

func (m *BatteryLevel) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Reply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c358c3c86a4308c, []int{6}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*StepUpdate)(nil), "pong.StepUpdate")
	proto.RegisterType((*AccelerometerUpdate)(nil), "pong.AccelerometerUpdate")
	proto.RegisterType((*UserAccelerometerUpdate)(nil), "pong.UserAccelerometerUpdate")
	proto.RegisterType((*GyroscopeUpdate)(nil), "pong.GyroscopeUpdate")
	proto.RegisterType((*DeviceInfo)(nil), "pong.DeviceInfo")
	proto.RegisterType((*BatteryLevel)(nil), "pong.BatteryLevel")
	proto.RegisterType((*Reply)(nil), "pong.Reply")
}

func init() { proto.RegisterFile("spy.proto", fileDescriptor_1c358c3c86a4308c) }

var fileDescriptor_1c358c3c86a4308c = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xd1, 0x4a, 0xfb, 0x30,
	0x18, 0xc5, 0xff, 0xd9, 0xfe, 0x73, 0xdb, 0xe7, 0xd4, 0x19, 0x1d, 0x56, 0x41, 0xd0, 0xe0, 0x85,
	0x20, 0x0c, 0x54, 0xbc, 0x12, 0x11, 0xab, 0x22, 0x82, 0x17, 0xa3, 0x65, 0x0f, 0x50, 0xdb, 0xcf,
	0x31, 0x68, 0x9b, 0x90, 0xc6, 0xb2, 0xec, 0x4d, 0x7d, 0x1b, 0x49, 0x53, 0xdd, 0xd6, 0xb9, 0x0b,
	0xf1, 0xf2, 0x9c, 0x9e, 0x73, 0x4a, 0x7e, 0x7c, 0xd0, 0xce, 0x84, 0xee, 0x0b, 0xc9, 0x15, 0xa7,
	0xff, 0x05, 0x4f, 0x47, 0x8c, 0x01, 0xf8, 0x0a, 0xc5, 0x50, 0x44, 0x81, 0x42, 0xba, 0x0b, 0x8d,
	0x3c, 0x88, 0xdf, 0xd1, 0x21, 0x47, 0xe4, 0xb4, 0xe1, 0x59, 0xc1, 0x6e, 0x61, 0xe7, 0x2e, 0x0c,
	0x31, 0x46, 0xc9, 0x13, 0x54, 0x28, 0xcb, 0x70, 0x07, 0xc8, 0xa4, 0x08, 0x12, 0x8f, 0x4c, 0x8c,
	0xd2, 0x4e, 0xcd, 0x2a, 0x6d, 0xd4, 0xd4, 0xa9, 0x5b, 0x35, 0x65, 0xf7, 0xb0, 0x37, 0xcc, 0x50,
	0xfe, 0x6d, 0xe4, 0x1a, 0xb6, 0x9e, 0xb4, 0xe4, 0x59, 0xc8, 0x05, 0xfe, 0xba, 0xcc, 0x00, 0x1e,
	0x30, 0x1f, 0x87, 0xf8, 0x9c, 0xbe, 0x71, 0xf3, 0xcc, 0x84, 0x47, 0x18, 0x17, 0xdd, 0xb6, 0x67,
	0x05, 0x3b, 0x81, 0x8e, 0x1b, 0x28, 0x85, 0x52, 0xbf, 0x60, 0x8e, 0xf1, 0x0a, 0x18, 0xc7, 0xd0,
	0xf0, 0x50, 0xc4, 0x9a, 0x3a, 0xd0, 0x4c, 0x30, 0xcb, 0x82, 0x11, 0x96, 0x33, 0x5f, 0xf2, 0xe2,
	0xa3, 0x06, 0x75, 0x5f, 0x68, 0x7a, 0x06, 0x2d, 0x1f, 0xd3, 0xc8, 0xf0, 0xa5, 0xdd, 0xbe, 0xc1,
	0xdd, 0x9f, 0xb1, 0x3e, 0x58, 0xb7, 0x4e, 0x31, 0xc6, 0xfe, 0xd1, 0x1b, 0xd8, 0x36, 0xe1, 0x05,
	0x46, 0x74, 0xdf, 0x66, 0x7e, 0x00, 0x57, 0xad, 0x3f, 0x42, 0xcf, 0xd4, 0x97, 0x30, 0xd3, 0x43,
	0x9b, 0x5b, 0xc1, 0xbf, 0x3a, 0x73, 0x05, 0x1b, 0x66, 0xe6, 0x1b, 0x34, 0xed, 0xd9, 0xef, 0x15,
	0xf2, 0xd5, 0xda, 0x39, 0x6c, 0x9a, 0xda, 0x1c, 0xe2, 0xf2, 0xbd, 0x33, 0x67, 0xf9, 0x4f, 0x5d,
	0x53, 0x59, 0x20, 0x4e, 0x6d, 0x64, 0xde, 0xab, 0xd4, 0xdc, 0x1e, 0x34, 0xc7, 0xbc, 0xb0, 0xdc,
	0x96, 0x2f, 0xf4, 0xc0, 0x9c, 0xf2, 0x80, 0xbc, 0xae, 0x15, 0x37, 0x7d, 0xf9, 0x19, 0x00, 0x00,
	0xff, 0xff, 0x42, 0xfa, 0x96, 0x6c, 0xe0, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpyClient is the client API for Spy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpyClient interface {
	SendStep(ctx context.Context, in *StepUpdate, opts ...grpc.CallOption) (*Reply, error)
	SendAccelerometer(ctx context.Context, in *AccelerometerUpdate, opts ...grpc.CallOption) (*Reply, error)
	SendUserAccelerometer(ctx context.Context, in *UserAccelerometerUpdate, opts ...grpc.CallOption) (*Reply, error)
	SendGyroscope(ctx context.Context, in *GyroscopeUpdate, opts ...grpc.CallOption) (*Reply, error)
	SendDeviceInfo(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Reply, error)
	SendBatteryLevel(ctx context.Context, in *BatteryLevel, opts ...grpc.CallOption) (*Reply, error)
}

type spyClient struct {
	cc *grpc.ClientConn
}

func NewSpyClient(cc *grpc.ClientConn) SpyClient {
	return &spyClient{cc}
}

func (c *spyClient) SendStep(ctx context.Context, in *StepUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/pong.Spy/SendStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spyClient) SendAccelerometer(ctx context.Context, in *AccelerometerUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/pong.Spy/SendAccelerometer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spyClient) SendUserAccelerometer(ctx context.Context, in *UserAccelerometerUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/pong.Spy/SendUserAccelerometer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spyClient) SendGyroscope(ctx context.Context, in *GyroscopeUpdate, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/pong.Spy/SendGyroscope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spyClient) SendDeviceInfo(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/pong.Spy/SendDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spyClient) SendBatteryLevel(ctx context.Context, in *BatteryLevel, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/pong.Spy/SendBatteryLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpyServer is the server API for Spy service.
type SpyServer interface {
	SendStep(context.Context, *StepUpdate) (*Reply, error)
	SendAccelerometer(context.Context, *AccelerometerUpdate) (*Reply, error)
	SendUserAccelerometer(context.Context, *UserAccelerometerUpdate) (*Reply, error)
	SendGyroscope(context.Context, *GyroscopeUpdate) (*Reply, error)
	SendDeviceInfo(context.Context, *DeviceInfo) (*Reply, error)
	SendBatteryLevel(context.Context, *BatteryLevel) (*Reply, error)
}

// UnimplementedSpyServer can be embedded to have forward compatible implementations.
type UnimplementedSpyServer struct {
}

func (*UnimplementedSpyServer) SendStep(ctx context.Context, req *StepUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStep not implemented")
}
func (*UnimplementedSpyServer) SendAccelerometer(ctx context.Context, req *AccelerometerUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAccelerometer not implemented")
}
func (*UnimplementedSpyServer) SendUserAccelerometer(ctx context.Context, req *UserAccelerometerUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserAccelerometer not implemented")
}
func (*UnimplementedSpyServer) SendGyroscope(ctx context.Context, req *GyroscopeUpdate) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGyroscope not implemented")
}
func (*UnimplementedSpyServer) SendDeviceInfo(ctx context.Context, req *DeviceInfo) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDeviceInfo not implemented")
}
func (*UnimplementedSpyServer) SendBatteryLevel(ctx context.Context, req *BatteryLevel) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBatteryLevel not implemented")
}

func RegisterSpyServer(s *grpc.Server, srv SpyServer) {
	s.RegisterService(&_Spy_serviceDesc, srv)
}

func _Spy_SendStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpyServer).SendStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pong.Spy/SendStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpyServer).SendStep(ctx, req.(*StepUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spy_SendAccelerometer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccelerometerUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpyServer).SendAccelerometer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pong.Spy/SendAccelerometer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpyServer).SendAccelerometer(ctx, req.(*AccelerometerUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spy_SendUserAccelerometer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccelerometerUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpyServer).SendUserAccelerometer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pong.Spy/SendUserAccelerometer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpyServer).SendUserAccelerometer(ctx, req.(*UserAccelerometerUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spy_SendGyroscope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GyroscopeUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpyServer).SendGyroscope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pong.Spy/SendGyroscope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpyServer).SendGyroscope(ctx, req.(*GyroscopeUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spy_SendDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpyServer).SendDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pong.Spy/SendDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpyServer).SendDeviceInfo(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spy_SendBatteryLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatteryLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpyServer).SendBatteryLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pong.Spy/SendBatteryLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpyServer).SendBatteryLevel(ctx, req.(*BatteryLevel))
	}
	return interceptor(ctx, in, info, handler)
}

var _Spy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pong.Spy",
	HandlerType: (*SpyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendStep",
			Handler:    _Spy_SendStep_Handler,
		},
		{
			MethodName: "SendAccelerometer",
			Handler:    _Spy_SendAccelerometer_Handler,
		},
		{
			MethodName: "SendUserAccelerometer",
			Handler:    _Spy_SendUserAccelerometer_Handler,
		},
		{
			MethodName: "SendGyroscope",
			Handler:    _Spy_SendGyroscope_Handler,
		},
		{
			MethodName: "SendDeviceInfo",
			Handler:    _Spy_SendDeviceInfo_Handler,
		},
		{
			MethodName: "SendBatteryLevel",
			Handler:    _Spy_SendBatteryLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spy.proto",
}
